{"version":3,"sources":["../../src/models/dbSelect.js"],"names":["express","require","mysql","router","Router","pool","createPool","host","user","password","database","get","req","res","getConnection","err","connection","json","post","userID","body","query","result","length","release","username","email","phoneNum","companyName","companyID","searchTerm","A_x","A_y","B_x","B_y","filterValue","starAverage","starValue","module","exports"],"mappings":"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","file":"dbSelect.js","sourcesContent":["const express = require('express');\nconst mysql = require('mysql');\nconst router = express.Router();\n\n//Data used to create connection to the database\nlet pool = mysql.createPool({\n    host: '127.0.0.1',\n    user: 'root',\n    password: 'TLGjb18!',\n    database: 'LittleGuys1'\n});\n\n//Test the connection for initial page\nrouter.get('/testConnection', function(req, res) {\n    pool.getConnection(function(err, connection) {\n       if(err){\n           res.json(503);\n       }else{\n           res.json(200);\n       }\n    });\n});\n\n//Selects a user based on userID\nrouter.post('/user', function(req, res) {\n    let userID = req.body.userID;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(DOB, \\\"%d-%m-%Y\\\") as DateofBirth,DATE_FORMAT(DOB, \\\"%Y-%m-%d\\\") as DateofBirth2 FROM Users WHERE userID = ?\", [userID], function (err, result) {\n            if (result.length === 1 && !err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects all reviews based on the username\nrouter.post('/UserReviews', function(req, res) {\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(ReviewDate, \\\"%d-%m-%Y\\\") as formReviewDate FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID JOIN Users ON Reviews.userID=Users.userID WHERE Users.username = ?\", [req.body.username],function(err, result) {\n            if(!err) {\n                res.json(result);\n            }else{\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Checks if user exists based on input username from account registration\nrouter.post('/checkUsername', function(req, res) {\n    let username = req.body.username;\n\n    if(username !== '') {\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Users WHERE username = ?\", [username], function (err, result) {\n                if (result.length > 0 && !err) {\n                    res.json('exists');\n                } else {\n                    res.json('Not exist');\n                }\n                connection.release();\n            });\n        });\n    }else{\n        res.json(\"No input\");\n    }\n});\n\n//Checks email exist based on input email from account registration\nrouter.post('/checkEmail', function(req, res) {\n    let email = req.body.email;\n\n    if(email !== '') {\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Users WHERE email = ?\", [email], function (err, result) {\n                if (result.length > 0 && !err) {\n                    res.json('exists');\n                } else {\n                    res.json(err);\n                }\n                connection.release();\n            });\n        });\n    }else{\n        res.json(\"No input\");\n    }\n});\n\n//Checks if phone number exists based on input number from account registration\nrouter.post('/checkNumber', function(req, res) {\n\n    let phoneNum = req.body.phoneNum;\n    if(phoneNum !== '') {\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Users WHERE phoneNum = ?\", [phoneNum], function (err, result) {\n                if (result.length > 0 && !err) {\n                    res.json('exists');\n                } else {\n                    res.json(err);\n                }\n                connection.release();\n            });\n        });\n    }else{\n        res.json(\"No input\");\n    }\n});\n\n//Checks on a company name\nrouter.post('/checkCompanyName', function(req, res) {\n\n    let companyName = req.body.companyName;\n    let companyID = req.body.companyID;\n\n    //If company name is not blank but the id is\n    if(companyName !== '' && companyID === '') {\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Business WHERE companyName = ?\", [companyName], function (err, result) {\n                if (result.length > 0 && !err) {\n                    res.json('exists');\n                } else {\n                    res.json(err);\n                }\n                connection.release();\n            });\n        });\n    }\n    //If both fields are not blank\n    else if(companyName !== '' && companyID !== ''){\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Business WHERE companyName = ? AND businessID != ?\", [companyName,companyID], function (err, result) {\n                if (result.length > 0 && !err) {\n                    res.json('exists');\n                } else {\n                    res.json(err);\n                }\n                connection.release();\n            });\n        });\n    }\n    else{\n        res.json(\"No input\");\n    }\n});\n\n\n//Selects a list of categories in ascending order\nrouter.get('/categories', function(req, res) {\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT * FROM Category ORDER BY categoryName ASC\", function (err, result) {\n            if (result.length > 0 && !err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects businesses based on the users input term\nrouter.post('/searchTerm', function(req, res) {\n    let searchTerm = req.body.searchTerm;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business  JOIN Category ON Category.categoryID=Business.categoryID WHERE Business.companyName LIKE CONCAT('%', ? , '%') ORDER BY businessID DESC\", [searchTerm], function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects all reviews in descending order for the most recent reviews page\nrouter.get('/ReviewTable', function(req, res) {\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(ReviewDate, \\\"%d-%m-%Y\\\") as formReviewDate FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID JOIN Users ON Reviews.userID=Users.userID ORDER BY ReviewDate DESC\", function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects all businesses in descending order\nrouter.get('/BusinessTable', function(req, res) {\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business  JOIN Category ON Category.categoryID=Business.categoryID ORDER BY businessID DESC\", function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects companies for homepage based on a square location of the users preset location\nrouter.post('/BusinessLatLng', function(req, res) {\n    let A_x = req.body.A_x;\n    let A_y = req.body.A_y;\n    let B_x = req.body.B_x;\n    let B_y = req.body.B_y;\n    let filterValue= req.body.filterValue;\n    if(filterValue === \"\") {\n        //This one is for when the user doesn't set the filter on the homepage\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT *, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business JOIN Category ON Category.categoryID=Business.categoryID  WHERE latitude < ? AND latitude > ? AND longitude > ? AND longitude <  ? ORDER BY Business.businessID DESC\", [A_x, B_x, B_y, A_y], function (err, result) {\n                if (err) {\n                    res.json(err);\n                }\n                if (result.length > 0) {\n                    res.json(result);\n                } else {\n                    res.json(\"No such business!\");\n                }\n                connection.release();\n            });\n        });\n    }else{\n        //This one is for when the user sets the filter on the homepage\n        pool.getConnection(function(err, connection) {\n            connection.query(\"SELECT * FROM Business JOIN Category ON Category.categoryID=Business.categoryID WHERE categoryName = ? AND latitude < ? AND latitude > ? AND longitude > ? AND longitude <  ? ORDER BY Business.businessID DESC\", [filterValue,A_x,B_x,B_y,A_y], function (err, result) {\n                if (err){\n                    res.json(err);\n                }\n                if (result.length > 0) {\n                    res.json(result);\n                } else {\n                    res.json(\"No such business!\");\n                }\n                connection.release();\n            });\n        });\n    }\n});\n\n//This is for when the user sets the filter on the All Businesses page\nrouter.post('/businessFilter', function(req, res){\n\n    let filterValue = req.body.filterValue;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business JOIN Category ON Category.categoryID=Business.categoryID WHERE categoryName = ?\", [filterValue], function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects a single business for the business profile page... based on which business is clicked into\nrouter.post('/oneBusiness', function(req, res){\n\n    let companyName = req.body.companyName;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business JOIN Category ON Category.categoryID=Business.categoryID  JOIN OpenHours ON Business.businessID = OpenHours.businessID  WHERE Business.companyName = ?\", [companyName], function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects the businesses associated with the userID\nrouter.post('/userBusiness', function(req, res){\n\n    let userID = req.body.userID;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(DOB, \\\"%Y-%m-%d\\\") as formYearEst2,DATE_FORMAT(yearEst, \\\"%Y-%m-%d\\\") as formYearEst3, DATE_FORMAT(yearEst, \\\"%d-%m-%Y\\\") as formYearEst, DATE_FORMAT(creationDate, \\\"%d-%m-%Y\\\") as formCreationDate FROM Business JOIN Category ON Category.categoryID=Business.categoryID  JOIN OpenHours ON Business.businessID = OpenHours.businessID JOIN Users ON Business.userID = Users.userID WHERE Business.userID = ?\", [userID], function (err, result) {\n            if (!err) {\n                res.json(result);\n            } else {\n                res.json(err);\n            }\n            connection.release();\n        });\n    });\n});\n\n//Selects all reviews relating to the company name passed in\nrouter.post('/businessReviews', function(req, res){\n\n    let companyName = req.body.companyName;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(ReviewDate, \\\"%d-%m-%Y\\\") as formReviewDate FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID JOIN Users ON Reviews.userID=Users.userID WHERE Business.companyName = ? ORDER BY ReviewDate DESC\", [companyName], function (err, result) {\n            if (err) {\n                res.json(err);\n            }\n            if (result.length > 0) {\n                res.json(result);\n            } else {\n                res.json(\"No reviews found\");\n            }\n            connection.release();\n        });\n    });\n});\n\n//Get the average rating for a business\nrouter.post('/averageRating', function(req, res){\n\n    let companyName = req.body.companyName;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT AVG(Stars) as starAverage FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID WHERE Business.companyName = ?\", [companyName], function (err, result) {\n            if (err) {\n                res.json(err);\n            }\n\n            if (result[0].starAverage === null) {\n                res.json(\"No reviews found\");\n            }\n            else if (result.length > 0) {\n                res.json(result);\n            } else {\n                res.json(\"No reviews found\");\n            }\n            connection.release();\n        });\n    });\n});\n\n//Used to Filter star rating of a specific business\nrouter.post('/businessReviewsFiltered', function(req, res){\n\n    let companyName = req.body.companyName;\n    let starValue = req.body.filterValue;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(ReviewDate, \\\"%d-%m-%Y\\\") as formReviewDate FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID JOIN Users ON Reviews.userID=Users.userID WHERE Business.companyName = ? AND Reviews.Stars = ? ORDER BY ReviewDate DESC\", [companyName, starValue], function (err, result) {\n            if (err) {\n                res.json(err);\n            }\n            if (result.length > 0) {\n                res.json(result);\n            } else {\n                res.json(\"No reviews found\");\n            }\n            connection.release();\n        });\n    });\n});\n\n//Used to filter star rating of a reviews\nrouter.post('/recentReviewsFiltered', function(req, res){\n\n    let starValue = req.body.filterValue;\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT *,DATE_FORMAT(ReviewDate, \\\"%d-%m-%Y\\\") as formReviewDate FROM Reviews JOIN Business ON Business.businessID=Reviews.businessID JOIN Users ON Reviews.userID=Users.userID WHERE Reviews.Stars = ? ORDER BY ReviewDate DESC\", [starValue], function (err, result) {\n            if (err) {\n                res.json(err);\n            }\n            if (result.length > 0) {\n                res.json(result);\n            } else {\n                res.json(\"No reviews found\");\n            }\n            connection.release();\n        });\n    });\n});\n\nmodule.exports = router;\n"]}