{"version":3,"sources":["../../src/models/authentication.js"],"names":["express","require","router","Router","mysql","jwt","fs","cert","readFileSync","pool","createPool","host","user","password","database","post","req","res","username","body","passwrd","secretkey","getConnection","err","connection","query","result","length","json","id","userID","userType","sign","expiresIn","token","release","verifyToken","verify","authData","next","bearerHeader","headers","bearer","split","sendStatus","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,QAAQH,QAAQ,OAAR,CAAd;AACA,IAAMI,MAAMJ,QAAQ,cAAR,CAAZ;AACA,IAAMK,KAAKL,QAAQ,IAAR,CAAX;;AAEA;AACA;;AAEA;AACA,IAAIM,OAAOD,GAAGE,YAAH,CAAgB,gCAAhB,CAAX;;AAEA;AACA,IAAIC,OAAOL,MAAMM,UAAN,CAAiB;AACxBC,UAAM,WADkB;AAExBC,UAAM,MAFkB;AAGxBC,cAAU,UAHc;AAIxBC,cAAU;AAJc,CAAjB,CAAX;;AAOA;AACAZ,OAAOa,IAAP,CAAY,aAAZ,EAA2B,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC1C,QAAIC,WAAWF,IAAIG,IAAJ,CAASD,QAAxB;AACA,QAAIE,UAAUJ,IAAIG,IAAJ,CAASC,OAAvB;AACA,QAAIC,YAAY,cAAhB;;AAEAZ,SAAKa,aAAL,CAAmB,UAASC,GAAT,EAAcC,UAAd,EAA0B;AACzCA,mBAAWC,KAAX,CAAiB,0EAAjB,EAA4F,CAACP,QAAD,EAAUG,SAAV,EAAoBD,OAApB,CAA5F,EAA0H,UAASG,GAAT,EAAcG,MAAd,EAAsB;AAC5I,gBAAIH,GAAJ,EAAS,MAAMA,GAAN;;AAET,gBAAIG,OAAOC,MAAP,KAAkB,CAAtB,EAAyB;AACrBV,oBAAIW,IAAJ,CAAS,MAAT;AACH,aAFD,MAEO;AACH,oBAAMhB,OAAO;AACTiB,wBAAIH,OAAO,CAAP,EAAUI,MADL;AAETZ,8BAAUA,QAFD;AAGTL,8BAAUO,OAHD;AAITW,8BAAUL,OAAO,CAAP,EAAUK;AAJX,iBAAb;;AAOA1B,oBAAI2B,IAAJ,CAAS,EAACpB,UAAD,EAAT,EAAiBL,IAAjB,EAAuB,EAAC0B,WAAW,KAAZ,EAAvB,EAA2C,UAACV,GAAD,EAAMW,KAAN,EAAgB;AACvDjB,wBAAIW,IAAJ,CAAS,EAACM,YAAD,EAAT;AACH,iBAFD;AAGH;AACDV,uBAAWW,OAAX;AACH,SAlBD;AAmBH,KApBD;AAqBH,CA1BD;;AA4BA;AACAjC,OAAOa,IAAP,CAAY,aAAZ,EAA0BqB,WAA1B,EAAsC,UAACpB,GAAD,EAAMC,GAAN,EAAc;;AAEhD,QAAIiB,QAAQlB,IAAIG,IAAJ,CAASe,KAArB;;AAEA7B,QAAIgC,MAAJ,CAAWrB,IAAIkB,KAAf,EAAsB3B,IAAtB,EAA4B,UAACgB,GAAD,EAAMe,QAAN,EAAkB;AAC1C,YAAGf,GAAH,EAAO;AACHN,gBAAIW,IAAJ,CAAS,MAAT;AACH,SAFD,MAEK;AACDX,gBAAIW,IAAJ,CAAS,MAAT;AACH;AACJ,KAND;AAOH,CAXD;;AAaA;AACA,SAASQ,WAAT,CAAqBpB,GAArB,EAA0BC,GAA1B,EAA+BsB,IAA/B,EAAoC;AAChC,QAAMC,eAAexB,IAAIyB,OAAJ,CAAY,eAAZ,CAArB;;AAEA,QAAG,OAAOD,YAAP,KAAwB,WAA3B,EAAuC;AACnC,YAAME,SAASF,aAAaG,KAAb,CAAmB,GAAnB,CAAf;AACA3B,YAAIkB,KAAJ,GAAYQ,OAAO,CAAP,CAAZ;AACAH;AACH,KAJD,MAIK;AACDtB,YAAI2B,UAAJ,CAAe,GAAf;AACH;AACJ;;AAEDC,OAAOC,OAAP,GAAiB5C,MAAjB","file":"authentication.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\n\n//Uncomment to when putting on server... Needs full path name on server\n//let cert = fs.readFileSync('/var/www/thelittleguysproject.me/src/public/data/jwtRS256.key');\n\n//Uncomment when running on local host\nlet cert = fs.readFileSync('./src/public/data/jwtRS256.key');\n\n//Data used to create connection to the database\nlet pool = mysql.createPool({\n    host: '127.0.0.1',\n    user: 'root',\n    password: 'TLGjb18!',\n    database: 'LittleGuys1'\n});\n\n//Checks the username and password when user logs in\nrouter.post('/checkLogin', function(req, res) {\n    let username = req.body.username;\n    let passwrd = req.body.passwrd;\n    let secretkey = 'secretkey123';\n\n    pool.getConnection(function(err, connection) {\n        connection.query(\"SELECT * FROM Users WHERE username = ? AND AES_DECRYPT(passwrd, ? ) = ?;\",[username,secretkey,passwrd], function(err, result) {\n            if (err) throw err;\n\n            if (result.length === 0) {\n                res.json('fail');\n            } else {\n                const user = {\n                    id: result[0].userID,\n                    username: username,\n                    password: passwrd,\n                    userType: result[0].userType,\n                };\n\n                jwt.sign({user}, cert, {expiresIn: \"24h\"}, (err, token) => {\n                    res.json({token});\n                });\n            }\n            connection.release();\n        });\n    });\n});\n\n//Checks if the current token is valid\nrouter.post('/checkToken',verifyToken,(req, res) => {\n\n    let token = req.body.token;\n\n    jwt.verify(req.token, cert, (err, authData) =>{\n        if(err){\n            res.json(\"Fail\");\n        }else{\n            res.json(\"pass\");\n        }\n    });\n});\n\n//Returns an error if token isn't valid or success if valid\nfunction verifyToken(req, res, next){\n    const bearerHeader = req.headers['authorization'];\n\n    if(typeof bearerHeader !== 'undefined'){\n        const bearer = bearerHeader.split(' ');\n        req.token = bearer[1];\n        next();\n    }else{\n        res.sendStatus(403);\n    }\n}\n\nmodule.exports = router;"]}